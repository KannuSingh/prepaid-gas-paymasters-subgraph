type PaymasterContract @entity(immutable: false) {
  # Unique identifier: network-contractAddress
  id: ID!
  
  # Contract identification
  address: Bytes!
  contractType: String! # "OneTimeUse", "GasLimited", "CacheEnabledGasLimited"
  network: String!
  chainId: BigInt!
  
  # Pool configuration (since each contract IS a pool)
  joiningAmount: BigInt! # JOINING_AMOUNT from contract
  scope: BigInt! # SCOPE constant from contract
  verifier: Bytes! # MEMBERSHIP_VERIFIER address
  
  # Financial tracking
  totalDeposit: BigInt! # Total deposits from users
  currentDeposit: BigInt! # Current deposit in EntryPoint
  revenue: BigInt! # Calculated revenue (getRevenue())
  
  # Merkle tree state
  root: BigInt! # Current merkle tree root
  rootIndex: BigInt! # Current root index in history
  treeDepth: BigInt! # Current tree depth
  treeSize: BigInt! # Number of members (tree size)
  
  # Pool status
  isDead: Boolean! # Whether the pool is dead
  
  # Deployment info
  deployedBlock: BigInt!
  deployedTransaction: Bytes!
  deployedTimestamp: BigInt!
  
  # Activity tracking
  lastBlock: BigInt!
  lastTimestamp: BigInt!
  
  # Relationships
  activities: [Activity!]! @derivedFrom(field: "paymaster")
  # userOperations: [UserOperation!]! @derivedFrom(field: "paymaster")
  # revenueWithdrawals: [RevenueWithdrawal!]! @derivedFrom(field: "paymaster")
}

type Activity @entity(immutable: true) {
  # Unique identifier: network-contractAddress-txHash-logIndex
  id: ID!
  
  # Activity classification
  type: ActivityType! # DEPOSIT, USER_OP_SPONSORED, or REVENUE_WITHDRAWN
  paymaster: PaymasterContract!
  network: String!
  chainId: BigInt!
  
  # Common event data
  block: BigInt!
  transaction: Bytes!
  timestamp: BigInt!
  
  # Deposit-specific fields (when type = DEPOSIT)
  depositor: Bytes # from Deposited._depositor
  commitment: BigInt # from Deposited._commitment
  memberIndex: BigInt # from LeafInserted._index
  newRoot: BigInt # from LeafInserted._root
  
  # UserOperation-specific fields (when type = USER_OP_SPONSORED)
  sender: Bytes # from UserOpSponsored.sender or UserOpSponsoredWithNullifier.sender
  userOpHash: Bytes # from UserOpSponsored.userOpHash or UserOpSponsoredWithNullifier.userOpHash
  actualGasCost: BigInt # from UserOpSponsored.actualGasCost or UserOpSponsoredWithNullifier.actualGasCost
  
  # RevenueWithdrawal-specific fields (when type = REVENUE_WITHDRAWN)
  withdrawAddress: Bytes # from RevenueWithdrawn.withdrawAddress
  amount: BigInt # from RevenueWithdrawn.amount
}

enum ActivityType {
  DEPOSIT
  USER_OP_SPONSORED
  REVENUE_WITHDRAWN
}

type UserOperation @entity(immutable: true) {
  # Unique identifier: network-contractAddress-userOpHash
  id: ID!
  
  # Operation identification
  hash: Bytes! # User operation hash from event
  paymaster: PaymasterContract! # The paymaster that sponsored this operation
  network: String!
  chainId: BigInt!
  
  # Operation details
  sender: Bytes! # from UserOpSponsored.sender or UserOpSponsoredWithNullifier.sender
  actualGasCost: BigInt! # from UserOpSponsored.actualGasCost or UserOpSponsoredWithNullifier.actualGasCost
  nullifier: BigInt! # from UserOpSponsoredWithNullifier.nullifier OR NullifierConsumed.nullifier
  
  # Execution info
  block: BigInt!
  transaction: Bytes!
  timestamp: BigInt!
}